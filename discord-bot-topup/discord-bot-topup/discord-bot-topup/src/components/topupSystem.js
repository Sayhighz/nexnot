import { 
  EmbedBuilder, 
  ActionRowBuilder, 
  ButtonBuilder, 
  ButtonStyle, 
  StringSelectMenuBuilder,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  ChannelType,
  PermissionFlagsBits,
  AttachmentBuilder,
  MessageFlags
} from 'discord.js';
import databaseService from "../services/databaseService.js";
import qrCodeService from "../services/qrCodeService.js";
import slipVerification from "./slipVerification.js";
import rconManager from "./rconManager.js";
import logService from "../services/logService.js";
import Helpers from "../utils/helpers.js";
import CONSTANTS from "../utils/constants.js";

class TopupSystem {
  constructor(client) {
    this.client = client;
    this.activeTickets = new Map(); // channelId -> ticketData
    this.userCooldowns = new Map(); // userId -> timestamp
  }

  async init() {
    console.log("üéÆ Topup System initialized");

    // Register slash commands
    await this.registerCommands();

    // Setup event listeners
    this.setupEventListeners();

    // Cleanup old temp files periodically
    setInterval(() => {
      Helpers.cleanupTempFiles();
    }, 3600000); // Every hour
  }

  async registerCommands() {
    const commands = [
      {
        name: "topup",
        description: "‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô",
      },
      {
        name: "setup",
        description: "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö (Admin only)",
        options: [
          {
            name: "channel",
            description: "Channel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô",
            type: 7, // CHANNEL
            required: true,
          },
        ],
      },
    ];

    try {
      await this.client.application.commands.set(commands);
      console.log("‚úÖ Topup commands registered");
    } catch (error) {
      console.error("‚ùå Error registering commands:", error);
    }
  }

  setupEventListeners() {
    this.client.on("interactionCreate", async (interaction) => {
      try {
        if (interaction.isCommand()) {
          await this.handleSlashCommands(interaction);
        }
      } catch (error) {
        logService.error("Command interaction error:", error);
      }
    });
  }

  async handleSlashCommands(interaction) {
    const { commandName } = interaction;

    switch (commandName) {
      case "topup":
        await this.handleTopupCommand(interaction);
        break;
      case "setup":
        await this.handleSetupCommand(interaction);
        break;
    }
  }

  async handleTopupCommand(interaction) {
    const embed = new EmbedBuilder()
      .setColor(CONSTANTS.COLORS.PRIMARY)
      .setTitle("üéÆ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
      .setDescription("‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô")
      .setTimestamp();

    const button = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId("start_topup")
        .setLabel("üõí ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô")
        .setStyle(ButtonStyle.Primary)
    );

    await interaction.reply({
      embeds: [embed],
      components: [button],
      ephemeral: false,
    });
  }

  async handleSetupCommand(interaction) {
    if (
      !interaction.member.permissions.has(PermissionFlagsBits.Administrator)
    ) {
      return await interaction.reply({
        content: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ",
        ephemeral: true,
      });
    }

    const channel = interaction.options.getChannel("channel");

    const embed = new EmbedBuilder()
      .setColor(CONSTANTS.COLORS.SUCCESS)
      .setTitle("üéÆ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
      .setDescription(
        `
        **‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô:**
        1. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô" ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
        2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Package ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        3. ‡∏Å‡∏£‡∏≠‡∏Å Steam64 ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        4. ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏° QR Code
        5. ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
        6. ‡∏£‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        
        **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:**
        - ‡∏™‡∏•‡∏¥‡∏õ‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
        - ‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ
        - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      `
      )
      .setFooter({ text: "‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥" })
      .setTimestamp();

    const buttons = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId("start_topup")
        .setLabel("üõí ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô")
        .setStyle(ButtonStyle.Primary),
      new ButtonBuilder()
        .setCustomId("view_scoreboard")
        .setLabel("üèÜ ‡∏î‡∏π Scoreboard")
        .setStyle(ButtonStyle.Secondary)
    );

    try {
      await channel.send({
        embeds: [embed],
        components: [buttons],
      });

      await interaction.reply({
        content: `‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${channel} ‡πÅ‡∏•‡πâ‡∏ß`,
        ephemeral: true,
      });
    } catch (error) {
      await interaction.reply({
        content: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
        ephemeral: true,
      });
    }
  }

  async handleButtonInteraction(interaction) {
  const { customId, user } = interaction;

  try {
    switch (customId) {
      case 'start_topup':
        await interaction.deferReply({ flags: MessageFlags.Ephemeral });
        await this.startTopupProcess(interaction);
        break;
        
      case 'view_scoreboard':
        await interaction.deferReply({ flags: MessageFlags.Ephemeral });
        const { default: ScoreboardManager } = await import('./scoreboardManager.js');
        const scoreboardManager = new ScoreboardManager(this.client);
        await scoreboardManager.showScoreboard(interaction);
        break;
        
      case 'confirm_package':
        await interaction.deferReply({ flags: MessageFlags.Ephemeral });
        await this.confirmPackageSelection(interaction);
        break;
        
      case 'cancel_topup':
        await interaction.deferReply();
        await this.cancelTopup(interaction);
        break;
        
      default:
        if (customId.startsWith('verify_slip_')) {
          await interaction.deferReply();
          await this.handleSlipVerification(interaction);
        } else if (customId.startsWith('scoreboard_')) {
          await interaction.deferUpdate();
          const { default: ScoreboardManager } = await import('./scoreboardManager.js');
          const scoreboardManager = new ScoreboardManager(this.client);
          await scoreboardManager.handleScoreboardNavigation(interaction);
        }
        break;
    }
  } catch (error) {
    logService.error('Button interaction error:', error);
    
    if (!interaction.replied && !interaction.deferred) {
      await interaction.reply({
        content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        flags: MessageFlags.Ephemeral
      });
    } else {
      await interaction.editReply({
        content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    }
  }
}

  async startTopupProcess(interaction) {
  const userId = interaction.user.id;
  
  // Check cooldown
  if (this.isUserOnCooldown(userId)) {
    return await interaction.editReply({
      content: '‚è∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà'
    });
  }

  // Check active tickets
  const activeTickets = await databaseService.getActiveTickets(userId);
  if (activeTickets.length >= CONSTANTS.TICKET.MAX_TICKETS_PER_USER) {
    return await interaction.editReply({
      content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ ticket ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏¥‡∏î ticket ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô'
    });
  }

  try {
    const config = await Helpers.loadConfig();
    const packages = config.packages;

    if (!packages || packages.length === 0) {
      return await interaction.editReply({
        content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö package ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ'
      });
    }

    const selectMenu = new StringSelectMenuBuilder()
      .setCustomId('select_package')
      .setPlaceholder('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Package ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£')
      .addOptions(
        packages.map(pkg => ({
          label: pkg.name,
          description: `${Helpers.formatCurrency(pkg.price)} - ${pkg.description}`,
          value: pkg.id
        }))
      );

    const row = new ActionRowBuilder().addComponents(selectMenu);

    const embed = new EmbedBuilder()
      .setColor(CONSTANTS.COLORS.INFO)
      .setTitle('üì¶ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Package')
      .setDescription('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Package ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠')
      .setTimestamp();

    // ‡πÉ‡∏ä‡πâ editReply ‡πÅ‡∏ó‡∏ô reply
    await interaction.editReply({
      embeds: [embed],
      components: [row]
    });

    // Set cooldown
    this.setUserCooldown(userId);

  } catch (error) {
    logService.error('Error starting topup process:', error);
    await interaction.editReply({
      content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    });
  }
}

  async handleSelectMenuInteraction(interaction) {
    if (interaction.customId === "select_package") {
      await this.handlePackageSelection(interaction);
    }
  }

  async handlePackageSelection(interaction) {
    const selectedPackageId = interaction.values[0];

    try {
      const config = await Helpers.loadConfig();
      const selectedPackage = config.packages.find(
        (pkg) => pkg.id === selectedPackageId
      );

      if (!selectedPackage) {
        return await interaction.reply({
          content: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Package ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
          ephemeral: true,
        });
      }

      // Show Steam64 input modal
      const modal = new ModalBuilder()
        .setCustomId(`steam64_input_${selectedPackageId}`)
        .setTitle("‡∏Å‡∏£‡∏≠‡∏Å Steam64 ID");

      const steam64Input = new TextInputBuilder()
        .setCustomId("steam64")
        .setLabel("Steam64 ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        .setStyle(TextInputStyle.Short)
        .setPlaceholder("76561198000000000")
        .setRequired(true)
        .setMinLength(9)
        .setMaxLength(9);

      const actionRow = new ActionRowBuilder().addComponents(steam64Input);
      modal.addComponents(actionRow);

      await interaction.showModal(modal);
    } catch (error) {
      logService.error("Error handling package selection:", error);
      await interaction.reply({
        content: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
        ephemeral: true,
      });
    }
  }

  async handleModalSubmit(interaction) {
  if (interaction.customId.startsWith('steam64_input_')) {
    await interaction.deferReply({ flags: MessageFlags.Ephemeral });
    
    try {
      await this.handleSteam64Input(interaction);
    } catch (error) {
      logService.error('Error in modal submit:', error);
      
      await interaction.editReply({
        content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    }
  }
}

async handleButtonInteraction(interaction) {
  const { customId, user } = interaction;

  try {
    switch (customId) {
      case 'start_topup':
        await interaction.deferReply({ ephemeral: true });
        await this.startTopupProcess(interaction);
        break;
        
      case 'view_scoreboard':
        await interaction.deferReply({ ephemeral: true });
        const { default: ScoreboardManager } = await import('./scoreboardManager.js');
        const scoreboardManager = new ScoreboardManager(this.client);
        await scoreboardManager.showScoreboard(interaction);
        break;
        
      case 'confirm_package':
        await interaction.deferReply({ ephemeral: true });
        await this.confirmPackageSelection(interaction);
        break;
        
      case 'cancel_topup':
        await interaction.deferReply();
        await this.cancelTopup(interaction);
        break;
        
      default:
        if (customId.startsWith('verify_slip_')) {
          await interaction.deferReply();
          await this.handleSlipVerification(interaction);
        }
        break;
    }
  } catch (error) {
    logService.error('Button interaction error:', error);
    
    if (!interaction.replied && !interaction.deferred) {
      await interaction.reply({
        content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        ephemeral: true
      });
    } else {
      await interaction.editReply({
        content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    }
  }
}

async handlePackageSelection(interaction) {
  const selectedPackageId = interaction.values[0];
  
  try {
    const config = await Helpers.loadConfig();
    const selectedPackage = config.packages.find(pkg => pkg.id === selectedPackageId);

    if (!selectedPackage) {
      return await interaction.reply({
        content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Package ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å',
        flags: MessageFlags.Ephemeral
      });
    }

    // Show Steam64 input modal
    const modal = new ModalBuilder()
      .setCustomId(`steam64_input_${selectedPackageId}`)
      .setTitle('‡∏Å‡∏£‡∏≠‡∏Å Steam64 ID');

    const steam64Input = new TextInputBuilder()
      .setCustomId('steam64')
      .setLabel('Steam64 ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì')
      .setStyle(TextInputStyle.Short)
      .setPlaceholder('76561198000000000')
      .setRequired(true)
      .setMinLength(9)
      .setMaxLength(9);

    const actionRow = new ActionRowBuilder().addComponents(steam64Input);
    modal.addComponents(actionRow);

    await interaction.showModal(modal);

  } catch (error) {
    logService.error('Error handling package selection:', error);
    await interaction.reply({
      content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
      flags: MessageFlags.Ephemeral
    });
  }
}

  async handleSteam64Input(interaction) {
    const packageId = interaction.customId.replace("steam64_input_", "");
    const steam64 = interaction.fields.getTextInputValue("steam64");

    // Validate Steam64
    // if (!Helpers.validateSteam64(steam64)) {
    //   return await interaction.editReply({
    //     content: "‚ùå Steam64 ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà",
    //   });
    // }

    try {
      const config = await Helpers.loadConfig();
      const selectedPackage = config.packages.find(
        (pkg) => pkg.id === packageId
      );

      if (!selectedPackage) {
        return await interaction.editReply({
          content: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Package ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
        });
      }

      // Update status ‡∏Å‡πà‡∏≠‡∏ô
      await interaction.editReply({
        content: "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á ticket... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà",
      });

      // Create ticket channel (‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö async)
      const ticketData = await this.createTicketChannel(
        interaction,
        selectedPackage,
        steam64
      );

      if (!ticketData) {
        return await interaction.editReply({
          content: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á ticket ‡πÑ‡∏î‡πâ",
        });
      }

      await interaction.editReply({
        content: `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á ticket ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà ${ticketData.channel} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠`,
      });
    } catch (error) {
      logService.error("Error handling Steam64 input:", error);
      await interaction.editReply({
        content: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
      });
    }
  }

  async createTicketChannel(interaction, packageInfo, steam64) {
    try {
      const guild = interaction.guild;
      const user = interaction.user;
      const ticketId = Helpers.generateTicketId();

      // Find or create category
      let category = guild.channels.cache.find(
        (c) =>
          c.name === CONSTANTS.CHANNELS.TICKET_CATEGORY &&
          c.type === ChannelType.GuildCategory
      );

      if (!category) {
        category = await guild.channels.create({
          name: CONSTANTS.CHANNELS.TICKET_CATEGORY,
          type: ChannelType.GuildCategory,
        });
      }

      // Create ticket channel
      const ticketChannel = await guild.channels.create({
        name: `${CONSTANTS.TICKET.PREFIX}${ticketId}`,
        type: ChannelType.GuildText,
        parent: category.id,
        permissionOverwrites: [
          {
            id: guild.roles.everyone.id,
            deny: [PermissionFlagsBits.ViewChannel],
          },
          {
            id: user.id,
            allow: [
              PermissionFlagsBits.ViewChannel,
              PermissionFlagsBits.SendMessages,
              PermissionFlagsBits.AttachFiles,
              PermissionFlagsBits.ReadMessageHistory,
            ],
          },
        ],
      });

      // Generate payment QR
      const config = await Helpers.loadConfig();
      const paymentImage = await qrCodeService.generatePaymentImage(
        packageInfo.price,
        packageInfo.name,
        config.qr_code.payment_info
      );

      const attachment = new AttachmentBuilder(paymentImage, {
        name: "payment.png",
      });

      // Create ticket embed
      const embed = new EmbedBuilder()
        .setColor(CONSTANTS.COLORS.INFO)
        .setTitle(`üé´ Ticket #${ticketId}`)
        .setDescription(
          `
          **Package:** ${packageInfo.name}
          **‡∏£‡∏≤‡∏Ñ‡∏≤:** ${Helpers.formatCurrency(packageInfo.price)}
          **Steam64:** \`${steam64}\`
          **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
          
          **‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:**
          1. ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
          2. ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ
          3. ‡∏£‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1-5 ‡∏ô‡∏≤‡∏ó‡∏µ)
          4. ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        `
        )
        .setImage("attachment://payment.png")
        .setTimestamp();

      const buttons = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId("cancel_topup")
          .setLabel("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
          .setStyle(ButtonStyle.Danger)
      );

      await ticketChannel.send({
        content: `${user}, ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô!`,
        embeds: [embed],
        files: [attachment],
        components: [buttons],
      });

      // Log to database
      const logId = await databaseService.logTopupTransaction({
        discordId: user.id,
        discordUsername: user.username,
        steam64: steam64,
        packageId: packageInfo.id,
        packageName: packageInfo.name,
        amount: packageInfo.price,
        ticketChannelId: ticketChannel.id,
        ticketId: ticketId,
        status: "pending",
      });

      // Create active ticket record
      await databaseService.createActiveTicket(
        user.id,
        ticketChannel.id,
        ticketId
      );

      // Store ticket data
      this.activeTickets.set(ticketChannel.id, {
        ticketId,
        userId: user.id,
        packageInfo,
        steam64,
        logId,
        status: "waiting_slip",
      });

      logService.logTopupEvent("ticket_created", user.id, {
        ticketId,
        packageId: packageInfo.id,
        amount: packageInfo.price,
      });

      return {
        channel: ticketChannel,
        ticketId,
      };
    } catch (error) {
      logService.error("Error creating ticket channel:", error);
      return null;
    }
  }

  async handleSlipSubmission(message) {
  if (!message.attachments.size) return;

  const channelId = message.channel.id;
  const ticketData = this.activeTickets.get(channelId);

  if (!ticketData || ticketData.userId !== message.author.id) {
    return;
  }

  if (ticketData.status !== 'waiting_slip') {
    return await message.reply('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ');
  }

  const attachment = message.attachments.first();
  
  // Validate file type
  const validExtensions = CONSTANTS.SLIP.ALLOWED_EXTENSIONS;
  const fileExt = attachment.name.toLowerCase().substring(attachment.name.lastIndexOf('.'));
  
  if (!validExtensions.includes(fileExt)) {
    return await message.reply('‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (.jpg, .jpeg, .png) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
  }

  // Validate file size
  if (attachment.size > CONSTANTS.SLIP.MAX_FILE_SIZE) {
    return await message.reply('‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10MB)');
  }

  // Update ticket status
  ticketData.status = 'processing_slip';
  this.activeTickets.set(channelId, ticketData);

  const processingEmbed = new EmbedBuilder()
    .setColor(CONSTANTS.COLORS.WARNING)
    .setTitle('‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ')
    .setDescription('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...')
    .setTimestamp();

  const processingMessage = await message.reply({ embeds: [processingEmbed] });

  try {
    // ‡πÇ‡∏´‡∏•‡∏î config ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    const config = await Helpers.loadConfig();
    
    console.log('üîç Processing slip with data:', {
      expectedAmount: ticketData.packageInfo.price,
      configBankInfo: config.qr_code.payment_info,
      packageName: ticketData.packageInfo.name
    });

    // Process slip verification ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    const verificationResult = await slipVerification.processSlipImage(
      attachment, 
      message.author.id, 
      ticketData.packageInfo.price,        // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
      config.qr_code.payment_info         // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    );

    if (!verificationResult.success) {
      ticketData.status = 'waiting_slip';
      this.activeTickets.set(channelId, ticketData);

      const errorEmbed = new EmbedBuilder()
        .setColor(CONSTANTS.COLORS.ERROR)
        .setTitle('‚ùå ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß')
        .setDescription(`‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${verificationResult.error}`)
        .setFooter({ 
          text: verificationResult.mockMode ? 'üß™ ‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö' : '‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ' 
        })
        .setTimestamp();

      await processingMessage.edit({ embeds: [errorEmbed] });
      return;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    const successEmbed = new EmbedBuilder()
      .setColor(CONSTANTS.COLORS.SUCCESS)
      .setTitle('‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
      .setDescription(`
        **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:**
        ‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: ${Helpers.formatCurrency(verificationResult.data.amount)}
        ‚Ä¢ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date(verificationResult.data.date).toLocaleString('th-TH')}
        ‚Ä¢ ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö: ${verificationResult.data.receiverBank || verificationResult.data.bank}
        ‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö: ${verificationResult.data.receiver}
        ‚Ä¢ ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö: ${verificationResult.data.receiverAccount}
        
        ${verificationResult.mockMode ? 'üß™ **‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö**' : ''}
        
        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Å‡∏°...
      `)
      .setTimestamp();

    await processingMessage.edit({ embeds: [successEmbed] });

    // Update database
    await databaseService.updateTopupStatus(ticketData.logId, 'verified', {
      verificationData: verificationResult.data,
      slipImageUrl: attachment.url
    });

    // Execute RCON commands
    await this.executePackageCommands(ticketData, processingMessage);

  } catch (error) {
    logService.error('Error processing slip:', error);
    
    ticketData.status = 'waiting_slip';
    this.activeTickets.set(channelId, ticketData);

    const systemErrorEmbed = new EmbedBuilder()
      .setColor(CONSTANTS.COLORS.ERROR)
      .setTitle('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö')
      .setDescription('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
      .setTimestamp();

    await processingMessage.edit({ embeds: [systemErrorEmbed] });
  }
}

  async executePackageCommands(ticketData, processingMessage) {
    try {
      const { packageInfo, steam64 } = ticketData;

      // Update processing message
      const executingEmbed = new EmbedBuilder()
        .setColor(CONSTANTS.COLORS.WARNING)
        .setTitle("‚öôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á")
        .setDescription("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì...")
        .setTimestamp();

      await processingMessage.edit({ embeds: [executingEmbed] });

      // Execute RCON commands
      const rconResults = [];
      for (const command of packageInfo.rcon_commands) {
        const processedCommand = command.replace("{steam64}", steam64);
        const result = await rconManager.executeCommand(processedCommand);
        rconResults.push({ command: processedCommand, result });
      }

      // Check if all commands succeeded
      const allSucceeded = rconResults.every((r) => r.result.success);

      if (allSucceeded) {
        // Success
        await databaseService.updateTopupStatus(ticketData.logId, "completed", {
          rconExecuted: true,
        });

        await databaseService.updateTicketStatus(
          ticketData.ticketId,
          "completed"
        );

        const successEmbed = new EmbedBuilder()
          .setColor(CONSTANTS.COLORS.SUCCESS)
          .setTitle("‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
          .setDescription(
            `
            **Package:** ${packageInfo.name}
            **Steam64:** \`${steam64}\`
            **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            
            ‡∏Ç‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡πÄ‡∏Å‡∏°
            
            ticket ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ
          `
          )
          .setTimestamp();

        await processingMessage.edit({ embeds: [successEmbed] });

        // Schedule channel cleanup
        setTimeout(async () => {
          try {
            await processingMessage.channel.delete();
            this.activeTickets.delete(ticketData.channelId);
          } catch (error) {
            console.error("Error deleting ticket channel:", error);
          }
        }, 300000); // 5 minutes

        logService.logTopupEvent("topup_completed", ticketData.userId, {
          ticketId: ticketData.ticketId,
          packageId: packageInfo.id,
          steam64,
        });
      } else {
        // Some commands failed
        await databaseService.updateTopupStatus(ticketData.logId, "failed", {
          rconExecuted: false,
          errorMessage: "RCON command execution failed",
        });

        const failedEmbed = new EmbedBuilder()
          .setColor(CONSTANTS.COLORS.ERROR)
          .setTitle("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á")
          .setDescription(
            `
            ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ
            
            ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏à‡πâ‡∏á Ticket ID: \`${ticketData.ticketId}\`
          `
          )
          .setTimestamp();

        await processingMessage.edit({ embeds: [failedEmbed] });

        logService.logTopupEvent("topup_failed", ticketData.userId, {
          ticketId: ticketData.ticketId,
          packageId: packageInfo.id,
          error: "RCON execution failed",
          rconResults,
        });
      }
    } catch (error) {
      logService.error("Error executing package commands:", error);

      await databaseService.updateTopupStatus(ticketData.logId, "failed", {
        rconExecuted: false,
        errorMessage: error.message,
      });

      const systemErrorEmbed = new EmbedBuilder()
        .setColor(CONSTANTS.COLORS.ERROR)
        .setTitle("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        .setDescription(
          `
          ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
          
          Ticket ID: \`${ticketData.ticketId}\`
        `
        )
        .setTimestamp();

      await processingMessage.edit({ embeds: [systemErrorEmbed] });
    }
  }

  async cancelTopup(interaction) {
  const channelId = interaction.channel.id;
  const ticketData = this.activeTickets.get(channelId);

  if (!ticketData || ticketData.userId !== interaction.user.id) {
    return await interaction.editReply({
      content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ticket ‡∏ô‡∏µ‡πâ'
    });
  }

  try {
    // Update database
    await databaseService.updateTopupStatus(ticketData.logId, 'cancelled');
    await databaseService.updateTicketStatus(ticketData.ticketId, 'cancelled');

    const cancelEmbed = new EmbedBuilder()
      .setColor(CONSTANTS.COLORS.WARNING)
      .setTitle('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô')
      .setDescription('‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß ticket ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ')
      .setTimestamp();

    // ‡πÉ‡∏ä‡πâ editReply ‡πÅ‡∏ó‡∏ô reply
    await interaction.editReply({ embeds: [cancelEmbed] });

    // Remove from active tickets
    this.activeTickets.delete(channelId);

    // Schedule channel deletion
    setTimeout(async () => {
      try {
        await interaction.channel.delete();
      } catch (error) {
        console.error('Error deleting cancelled ticket:', error);
      }
    }, 10000);

    logService.logTopupEvent('topup_cancelled', ticketData.userId, {
      ticketId: ticketData.ticketId,
      packageId: ticketData.packageInfo.id
    });

  } catch (error) {
    logService.error('Error cancelling topup:', error);
    await interaction.editReply({
      content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    });
  }
}

  isUserOnCooldown(userId) {
    const cooldownTime = this.userCooldowns.get(userId);
    if (!cooldownTime) return false;

    return Date.now() - cooldownTime < 5000; // 5 seconds cooldown
  }

  setUserCooldown(userId) {
    this.userCooldowns.set(userId, Date.now());
  }
}

export default TopupSystem;
