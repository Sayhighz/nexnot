// src/services/webhookService.js (Full Code - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏™‡∏•‡∏¥‡∏õ)
import axios from 'axios';
import configService from './configService.js';
import logService from './logService.js';
import Helpers from '../utils/helpers.js';
import BrandUtils from '../utils/brandUtils.js';

class WebhookService {
  constructor() {
    this.config = null;
    this.isEnabled = false;
    this.webhookUrl = null;
    this.initializeConfig();
  }

  initializeConfig() {
    try {
      this.config = configService.get('discord_webhook', {});
      this.isEnabled = this.config.enabled || false;
      this.webhookUrl = this.config.donation_webhook_url;

      if (!this.isEnabled) {
        console.warn('‚ö†Ô∏è Discord webhook is disabled');
        return;
      }

      if (!this.webhookUrl || this.webhookUrl.includes('YOUR_WEBHOOK_URL')) {
        console.warn('‚ö†Ô∏è Discord webhook URL not configured properly');
        this.isEnabled = false;
        return;
      }

      console.log('‚úÖ Discord webhook service initialized');
      console.log(`üîó Webhook URL: ${this.webhookUrl.substring(0, 50)}...`);
    } catch (error) {
      console.error('‚ùå Error initializing webhook service:', error);
      this.isEnabled = false;
    }
  }

  async sendDonationNotification(donationData) {
    if (!this.isEnabled) {
      console.log('üì¢ Webhook disabled - skipping donation notification');
      return { success: false, reason: 'disabled' };
    }

    try {
      const embed = this.createDonationEmbed(donationData);
      
      const payload = {
        username: this.config.username || 'NEXArk Donation Bot',
        avatar_url: this.config.avatar_url,
        embeds: [embed]
      };

      console.log('üì¢ Sending donation notification to webhook...');

      const response = await axios.post(this.webhookUrl, payload, {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 10000
      });

      if (response.status === 204) {
        console.log('‚úÖ Donation notification sent successfully');
        logService.info('Webhook notification sent', {
          discordId: donationData.discordId,
          username: donationData.discordUsername,
          category: donationData.category,
          itemName: donationData.itemName,
          amount: donationData.amount,
          server: donationData.server,
          hasSlipImage: !!donationData.slipImageUrl
        });

        return { success: true };
      } else {
        throw new Error(`Unexpected response status: ${response.status}`);
      }

    } catch (error) {
      console.error('‚ùå Error sending webhook notification:', error);
      logService.error('Webhook notification failed', {
        error: error.message,
        discordId: donationData.discordId,
        amount: donationData.amount
      });

      return { 
        success: false, 
        error: error.message 
      };
    }
  }

  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏™‡∏•‡∏¥‡∏õ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  createDonationEmbed(donationData) {
    const {
      discordId,
      discordUsername,
      steam64,
      characterId,
      category,
      itemName,
      amount,
      server,
      status,
      ticketId,
      playerName,
      timestamp,
      slipImageUrl,
      verificationData
    } = donationData;

    const categoryIcon = BrandUtils.getCategoryIcon(category);
    const categoryName = BrandUtils.getCategoryName(category);
    const statusColor = this.getStatusColor(status);

    const embed = {
      title: `${categoryIcon} ‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡πÄ‡∏ô‡∏ó‡πÉ‡∏´‡∏°‡πà - ${categoryName}`,
      description: `**${itemName}**\nüí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${Helpers.formatCurrency(amount)}`,
      color: statusColor,
      timestamp: timestamp || new Date().toISOString(),
      fields: [
        {
          name: 'üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô',
          value: `**Discord:** <@${discordId}> (${discordUsername})\n**‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏Å‡∏°:** ${playerName || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}\n**Steam64:** \`${steam64}\``,
          inline: true
        },
        {
          name: 'üéÆ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
          value: `**‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:** ${server || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}\n**Character ID:** \`${characterId || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}\`\n**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** ${BrandUtils.getStatusIndicator(status)}`,
          inline: true
        },
        {
          name: 'üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
          value: `**Ticket ID:** \`${ticketId}\`\n**‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:** ${categoryName}\n**‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:** ${Helpers.formatDateTime(new Date())}`,
          inline: false
        }
      ],
      footer: {
        text: `${BrandUtils.brandFooter} | Ticket: ${ticketId}`,
        icon_url: this.config.avatar_url
      }
    };

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏™‡∏•‡∏¥‡∏õ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (slipImageUrl) {
      embed.image = {
        url: slipImageUrl
      };
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏•‡∏¥‡∏õ
      if (verificationData) {
        let slipInfo = `üí≥ **‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:** ${Helpers.formatCurrency(verificationData.amount || amount)}`;
        
        if (verificationData.date) {
          const slipDate = new Date(verificationData.date);
          slipInfo += `\nüìÖ **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô:** ${slipDate.toLocaleString('th-TH')}`;
        }
        
        if (verificationData.bank || verificationData.receiverBank) {
          slipInfo += `\nüè¶ **‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£:** ${verificationData.bank || verificationData.receiverBank}`;
        }
        
        if (verificationData.sender) {
          slipInfo += `\nüë§ **‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô:** ${verificationData.sender}`;
        }
        
        if (verificationData.transactionId) {
          slipInfo += `\nüî¢ **Transaction ID:** \`${verificationData.transactionId}\``;
        }

        embed.fields.push({
          name: 'üßæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏•‡∏¥‡∏õ',
          value: slipInfo,
          inline: false
        });
      }
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≤‡∏° category
    if (category === 'points' && donationData.points) {
      embed.fields.push({
        name: 'üíé ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡πâ‡∏≠‡∏¢',
        value: `**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:** ${donationData.points} ‡∏û‡πâ‡∏≠‡∏¢`,
        inline: false
      });
    }

    if (category === 'items' && donationData.kits) {
      const kitsList = donationData.kits.map(kit => 
        `‚Ä¢ ${kit.kitName} x${kit.quantity || 1}`
      ).join('\n');
      
      embed.fields.push({
        name: 'üéÅ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Kit',
        value: kitsList.length > 1000 ? kitsList.substring(0, 1000) + '...' : kitsList,
        inline: false
      });
    }

    if (category === 'ranks' && donationData.rank) {
      embed.fields.push({
        name: 'üëë ‡∏¢‡∏®‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö',
        value: `**‡∏¢‡∏®:** ${donationData.rank}`,
        inline: false
      });
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (donationData.error && status === 'failed') {
      embed.fields.push({
        name: '‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        value: `\`${donationData.error}\``,
        inline: false
      });
    }

    return embed;
  }

  getStatusColor(status) {
    const colors = {
      'pending': 0xFFA726,      // Orange
      'verified': 0x2196F3,     // Blue  
      'completed': 0x4CAF50,    // Green
      'failed': 0xF44336,       // Red
      'cancelled': 0x9E9E9E     // Gray
    };
    return colors[status] || colors.pending;
  }

  async testWebhook() {
    if (!this.isEnabled) {
      return { 
        success: false, 
        error: 'Webhook is disabled' 
      };
    }

    try {
      const testEmbed = {
        title: 'üß™ Webhook Test',
        description: '‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Discord Webhook',
        color: 0x2196F3,
        fields: [
          {
            name: '‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
            value: 'Webhook ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
            inline: false
          }
        ],
        timestamp: new Date().toISOString(),
        footer: {
          text: BrandUtils.brandFooter,
          icon_url: this.config.avatar_url
        }
      };

      const payload = {
        username: this.config.username || 'NEXArk Test Bot',
        avatar_url: this.config.avatar_url,
        embeds: [testEmbed]
      };

      const response = await axios.post(this.webhookUrl, payload, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 10000
      });

      if (response.status === 204) {
        return { 
          success: true, 
          message: 'Webhook test successful' 
        };
      } else {
        throw new Error(`Unexpected response status: ${response.status}`);
      }

    } catch (error) {
      return { 
        success: false, 
        error: error.message 
      };
    }
  }

  getServiceStatus() {
    return {
      enabled: this.isEnabled,
      hasWebhookUrl: !!this.webhookUrl,
      webhookUrlValid: this.webhookUrl && !this.webhookUrl.includes('YOUR_WEBHOOK_URL'),
      config: {
        username: this.config?.username || 'Not set',
        avatar_url: this.config?.avatar_url || 'Not set'
      }
    };
  }

  reloadConfig() {
    this.initializeConfig();
    return this.getServiceStatus();
  }
}

export default new WebhookService();